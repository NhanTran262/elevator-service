name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-java:
    name: Build Java Spring boot with gradle
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: ./gradlew build

  dependency-submission:
    name: Dependency Submission
    runs-on: ubuntu-latest
    needs: [ build-java ]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582

  build-docker-image:
    name: Build Docker Image and Push to DockerHub
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.base_ref == 'main')
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_DB: ${{ secrets.MYSQL_DB }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          DOMAIN: ${{secrets.DOMAIN}}
        run: ./gradlew build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check and re-tag existing image
        id: check_image
        run: |
          if docker manifest inspect ${{ secrets.DOCKER_HUB_USERNAME }}/elevator:BE-latest > /dev/null 2>&1; then
            CURRENT_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKER_HUB_USERNAME }}/elevator/tags?page_size=100" | jq -r '.results[] | select(.name | startswith("BE-v")) | .name' | sort -V | tail -n 1)
            if [ -z "$CURRENT_VERSION" ]; then
              NEW_VERSION="BE-v.0.0.1"
            else
              LAST_NUM=$(echo $CURRENT_VERSION | grep -o '[0-9]*$')
              NEW_NUM=$((LAST_NUM + 1))
              NEW_VERSION="BE-v.0.0.$NEW_NUM"
            fi
            echo "Current version: $CURRENT_VERSION"
            echo "New version: $NEW_VERSION"
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/elevator:BE-latest
            docker tag  ${{ secrets.DOCKER_HUB_USERNAME }}/elevator:BE-latest ${{ secrets.DOCKER_HUB_USERNAME }}/elevator:$NEW_VERSION
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/elevator:$NEW_VERSION
          fi

      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/elevator:BE-latest

  deploy:
    name: Deploy to Ubuntu server
    runs-on: ubuntu-latest
    needs: [ build-docker-image ]
    steps:
      - name: Deploying
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          password: ${{ secrets.SERVER_PASSWORD }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /elevator
            cp compose.yaml compose.yaml.bak
            sed -i "s/MYSQL_HOST=.*/MYSQL_HOST=${{ secrets.MYSQL_HOST }}/" compose.yaml
            sed -i "s/MYSQL_USER=.*/MYSQL_USER=${{ secrets.MYSQL_USER }}/" compose.yaml
            sed -i "s/MYSQL_PASSWORD=.*/MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}/" compose.yaml
            sed -i "s/MYSQL_DB=.*/MYSQL_DB=${{ secrets.MYSQL_DB }}/" compose.yaml
            sed -i "s/DOMAIN=.*/DOMAIN=${{ secrets.DOMAIN }}/" compose.yaml
            docker compose pull
            docker compose down
            docker compose up -d
            docker image prune -f
            mv compose.yaml.bak compose.yaml
            
